---
description: "테스트 필수사항 - 단위 테스트, 통합 테스트, 성능 테스트"
globs: ["**/*.py", "**/*.js", "**/*.ts"]
alwaysApply: true
---

# 테스트 필수사항

## 단위 테스트
- **코드 커버리지**: 80% 이상 필수
- **모든 함수**: 단위 테스트 작성
- **모킹**: 외부 의존성 모킹 필수
- **테스트 명명**: `test_<function_name>_<scenario>`

## 통합 테스트
- **API 엔드포인트**: 모든 CRUD 작업 테스트
- **데이터베이스**: 실제 DB 연결 테스트
- **외부 서비스**: Mock 서버 사용

## 성능 테스트
- **부하 테스트**: 1000 동시 사용자
- **응답 시간**: P95 < 200ms
- **에러율**: < 0.1%

## 테스트 구현 예시
```python
# 단위 테스트
import pytest
from unittest.mock import Mock, patch

class TestTradingService:
    def setup_method(self):
        self.trading_service = TradingService()
    
    def test_process_order_success(self):
        # Given
        order_data = {
            'symbol': 'BTC/USD',
            'side': 'buy',
            'amount': 1.0,
            'price': 50000
        }
        
        # When
        result = self.trading_service.process_order(order_data)
        
        # Then
        assert result['status'] == 'success'
        assert result['order_id'] is not None
    
    @patch('trading_service.ExchangeAPI')
    def test_process_order_exchange_error(self, mock_exchange):
        # Given
        mock_exchange.return_value.place_order.side_effect = Exception("Exchange error")
        order_data = {'symbol': 'BTC/USD', 'side': 'buy', 'amount': 1.0}
        
        # When & Then
        with pytest.raises(TradingError):
            self.trading_service.process_order(order_data)

# 통합 테스트
class TestTradingAPI:
    def test_create_order_endpoint(self, client):
        # Given
        order_data = {
            'symbol': 'BTC/USD',
            'side': 'buy',
            'amount': 1.0
        }
        
        # When
        response = client.post('/api/orders', json=order_data)
        
        # Then
        assert response.status_code == 201
        assert response.json()['status'] == 'success'
    
    def test_get_orders_endpoint(self, client):
        # When
        response = client.get('/api/orders')
        
        # Then
        assert response.status_code == 200
        assert isinstance(response.json(), list)

# 성능 테스트
import locust
from locust import HttpUser, task, between

class TradingUser(HttpUser):
    wait_time = between(1, 3)
    
    @task
    def create_order(self):
        order_data = {
            'symbol': 'BTC/USD',
            'side': 'buy',
            'amount': 1.0
        }
        self.client.post('/api/orders', json=order_data)
    
    @task
    def get_orders(self):
        self.client.get('/api/orders')
```
